<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="cn.zx.biri.commentservice.mapper.ReplyMapper">
  <resultMap id="BaseResultMap" type="cn.zx.biri.common.pojo.entry.Reply">
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="commentId" jdbcType="INTEGER" property="commentId" />
    <result column="fromUserId" jdbcType="INTEGER" property="fromUserId" />
    <result column="toUserId" jdbcType="INTEGER" property="toUserId" />
    <result column="detail" jdbcType="VARCHAR" property="detail" />
    <result column="datetime" jdbcType="VARCHAR" property="datetime" />
  </resultMap>
  <resultMap id="repliesEnhanced" type="cn.zx.biri.common.pojo.response.ReplyEnhancedList">
    <result column="commentId" javaType="INTEGER" property="commentId"/>
    <collection property="replyEnhanceds" ofType="cn.zx.biri.common.pojo.response.ReplyEnhanced">
      <result column="id" jdbcType="INTEGER" property="id"/>
      <result column="commentId" javaType="INTEGER" property="commentId"/>
      <result column="replyFromUserId" jdbcType="INTEGER" property="fromUserId"/>
      <result column="replyToUserId" jdbcType="INTEGER" property="toUserId"/>
      <result column="replyDetail" jdbcType="VARCHAR" property="detail"/>
      <result column="replyDatetime" jdbcType="VARCHAR" property="datetime" />
      <result column="replyFromUserName" jdbcType="VARCHAR" property="fromUsername"/>
      <result column="replyToUserName" jdbcType="VARCHAR" property="toUsername"/>
      <result column="replySupports" jdbcType="INTEGER" property="supports"/>
      <result column="isCurrentUserSupportReply" jdbcType="INTEGER" property="isCurrentUserSupport"/>
    </collection>
  </resultMap>
  <resultMap id="replyEnhanced" type="cn.zx.biri.common.pojo.response.ReplyEnhanced">
      <id column="id" jdbcType="INTEGER" property="id"/>
      <result column="commentId" javaType="INTEGER" property="commentId"/>
      <result column="replyFromUserId" jdbcType="INTEGER" property="fromUserId"/>
      <result column="replyToUserId" jdbcType="INTEGER" property="toUserId"/>
      <result column="replyDetail" jdbcType="VARCHAR" property="detail"/>
      <result column="replyDatetime" jdbcType="VARCHAR" property="datetime" />
      <result column="replyFromUserName" jdbcType="VARCHAR" property="fromUsername"/>
      <result column="replyToUserName" jdbcType="VARCHAR" property="toUsername"/>
      <result column="replySupports" jdbcType="INTEGER" property="supports"/>
      <result column="isCurrentUserSupportReply" jdbcType="INTEGER" property="isCurrentUserSupport"/>
  </resultMap>
  <select id="getRepliesByCommentId" resultMap="repliesEnhanced" parameterType="java.util.Map">
 SELECT
	reply.commentId AS commentId,
	reply.id AS id,
	reply.fromUserId AS replyFromUserId,
	reply.toUserId AS replyToUserId,
	reply.datetime AS replyDatetime,
	reply.detail AS replyDetail,
(SELECT COUNT(*) FROM replySupport  WHERE replySupport.replyId = reply.id) AS replySupports,
(SELECT COUNT(*) FROM replySupport  WHERE replySupport.replyId = reply.id AND replySupport.userId=#{currentUserId}) AS isCurrentUserSupportReply,
(SELECT nickname FROM `user` WHERE id = reply.fromUserId) AS replyFromUserName,
(SELECT nickname FROM `user` WHERE id = reply.toUserId) AS replytoUserName
FROM reply WHERE reply.commentId IN
    <foreach collection="commentIds" item="id" index="index" open="(" close=")" separator=",">
      #{id}
    </foreach>
    AND #{pageSize}>(select count(*) from reply AS b where reply.commentId=b.commentId and reply.id>b.id);
  </select>

  <select id="getReplyByCommentIdAndPageNow" resultMap="replyEnhanced" parameterType="java.util.Map">
    SELECT
    reply.commentId AS commentId,
    reply.id AS id,
    reply.fromUserId AS replyFromUserId,
    reply.toUserId AS replyToUserId,
    reply.datetime AS replyDatetime,
    reply.detail AS replyDetail,
    (SELECT COUNT(*) FROM replySupport  WHERE replySupport.replyId = reply.id) AS replySupports,
    (SELECT COUNT(*) FROM replySupport  WHERE replySupport.replyId = reply.id AND replySupport.userId=#{currentUserId}) AS isCurrentUserSupportReply,
    (SELECT nickname FROM `user` WHERE id = reply.fromUserId) AS replyFromUserName,
    (SELECT nickname FROM `user` WHERE id = reply.toUserId) AS replytoUserName
    FROM reply WHERE reply.commentId = #{commentId} limit #{start},#{pageSize}
    </select>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    id, commentId, fromUserId, toUserId, detail, datetime
  </sql>
  <select id="selectByExample" parameterType="cn.zx.biri.common.pojo.example.ReplyExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from reply
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from reply
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from reply
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="cn.zx.biri.common.pojo.example.ReplyExample">
    delete from reply
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="cn.zx.biri.common.pojo.entry.Reply">
    insert into reply (id, commentId, fromUserId, 
      toUserId, detail, datetime
      )
    values (#{id,jdbcType=INTEGER}, #{commentId,jdbcType=INTEGER}, #{fromUserId,jdbcType=INTEGER}, 
      #{toUserId,jdbcType=INTEGER}, #{detail,jdbcType=VARCHAR}, #{datetime,jdbcType=VARCHAR}
      )
  </insert>
  <insert id="insertSelective" parameterType="cn.zx.biri.common.pojo.entry.Reply">
    insert into reply
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="commentId != null">
        commentId,
      </if>
      <if test="fromUserId != null">
        fromUserId,
      </if>
      <if test="toUserId != null">
        toUserId,
      </if>
      <if test="detail != null">
        detail,
      </if>
      <if test="datetime != null">
        datetime,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=INTEGER},
      </if>
      <if test="commentId != null">
        #{commentId,jdbcType=INTEGER},
      </if>
      <if test="fromUserId != null">
        #{fromUserId,jdbcType=INTEGER},
      </if>
      <if test="toUserId != null">
        #{toUserId,jdbcType=INTEGER},
      </if>
      <if test="detail != null">
        #{detail,jdbcType=VARCHAR},
      </if>
      <if test="datetime != null">
        #{datetime,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="cn.zx.biri.common.pojo.example.ReplyExample" resultType="java.lang.Long">
    select count(*) from reply
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update reply
    <set>
      <if test="record.id != null">
        id = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.commentId != null">
        commentId = #{record.commentId,jdbcType=INTEGER},
      </if>
      <if test="record.fromUserId != null">
        fromUserId = #{record.fromUserId,jdbcType=INTEGER},
      </if>
      <if test="record.toUserId != null">
        toUserId = #{record.toUserId,jdbcType=INTEGER},
      </if>
      <if test="record.detail != null">
        detail = #{record.detail,jdbcType=VARCHAR},
      </if>
      <if test="record.datetime != null">
        datetime = #{record.datetime,jdbcType=VARCHAR},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update reply
    set id = #{record.id,jdbcType=INTEGER},
      commentId = #{record.commentId,jdbcType=INTEGER},
      fromUserId = #{record.fromUserId,jdbcType=INTEGER},
      toUserId = #{record.toUserId,jdbcType=INTEGER},
      detail = #{record.detail,jdbcType=VARCHAR},
      datetime = #{record.datetime,jdbcType=VARCHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="cn.zx.biri.common.pojo.entry.Reply">
    update reply
    <set>
      <if test="commentId != null">
        commentId = #{commentId,jdbcType=INTEGER},
      </if>
      <if test="fromUserId != null">
        fromUserId = #{fromUserId,jdbcType=INTEGER},
      </if>
      <if test="toUserId != null">
        toUserId = #{toUserId,jdbcType=INTEGER},
      </if>
      <if test="detail != null">
        detail = #{detail,jdbcType=VARCHAR},
      </if>
      <if test="datetime != null">
        datetime = #{datetime,jdbcType=VARCHAR},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="cn.zx.biri.common.pojo.entry.Reply">
    update reply
    set commentId = #{commentId,jdbcType=INTEGER},
      fromUserId = #{fromUserId,jdbcType=INTEGER},
      toUserId = #{toUserId,jdbcType=INTEGER},
      detail = #{detail,jdbcType=VARCHAR},
      datetime = #{datetime,jdbcType=VARCHAR}
    where id = #{id,jdbcType=INTEGER}
  </update>
</mapper>