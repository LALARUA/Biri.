<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="cn.zx.biri.bookservice.mapper.BookMapper">
  <resultMap id="BaseResultMap" type="cn.zx.biri.common.pojo.entry.Book">
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="title" jdbcType="VARCHAR" property="title" />
    <result column="imagePath" jdbcType="VARCHAR" property="imagePath" />
    <result column="publisher" jdbcType="VARCHAR" property="publisher" />
    <result column="price" jdbcType="DOUBLE" property="price" />
    <result column="isbn" jdbcType="BIGINT" property="isbn" />
    <result column="putaway" jdbcType="VARCHAR" property="putaway" />
    <result column="sales" jdbcType="INTEGER" property="sales" />
    <result column="stock" jdbcType="INTEGER" property="stock" />
    <result column="publishDate" jdbcType="VARCHAR" property="publishDate" />
    <result column="score" jdbcType="DOUBLE" property="score" />
  </resultMap>
  <resultMap extends="BaseResultMap" id="ResultMapWithBLOBs" type="cn.zx.biri.common.pojo.entry.BookWithBLOBs">
    <result column="summary" jdbcType="LONGVARCHAR" property="summary" />
    <result column="catalog" jdbcType="LONGVARCHAR" property="catalog" />
  </resultMap>
  <resultMap id="BookListDisplay" extends="ResultMapWithBLOBs" type="cn.zx.biri.common.pojo.response.BookEnhanced">
    <!--<id column="id" jdbcType="INTEGER" property="id" />-->
    <!--<result column="title" jdbcType="VARCHAR" property="title" />-->
    <!--<result column="imagePath" jdbcType="VARCHAR" property="imagePath" />-->
    <!--<result column="publisher" jdbcType="VARCHAR" property="publisher" />-->
    <!--<result column="price" jdbcType="DOUBLE" property="price" />-->
     <!--<result column="score" jdbcType="DOUBLE" property="score" />-->
    <result column="hotComment" jdbcType="VARCHAR" property="hotComment" />
    <!--<result column="summary" jdbcType="VARCHAR" property="summary" />-->
    <!--<result column="stock" jdbcType="INTEGER" property="stock" />-->
    <collection property="status" ofType="cn.zx.biri.common.pojo.response.BookStatusEnhanced">
      <id column="bookWithStatusId" jdbcType="INTEGER" property="id" />
      <result column="statusDescription" jdbcType="VARCHAR" property="description" />
      <result column="statusId" jdbcType="DOUBLE" property="status" />
    </collection>

    <collection property="imagePaths" ofType="cn.zx.biri.common.pojo.entry.BookWithImagePath">
      <id column="imagePathId" jdbcType="INTEGER" property="id" />
      <result column="imagePath" jdbcType="VARCHAR" property="bookImagePath" />
      <result column="imagePathStatus" jdbcType="VARCHAR" property="status" />
    </collection>
    <collection property="authors" ofType="cn.zx.biri.common.pojo.entry.Author">
      <id column="authorId" jdbcType="INTEGER" property="id" />
      <result column="authorName" jdbcType="VARCHAR" property="name" />
      <result column="authorIntroduction" jdbcType="LONGVARCHAR" property="introduction" />
    </collection>
    <collection property="tags" ofType="cn.zx.biri.common.pojo.entry.Tag">
      <id column="tagId" jdbcType="INTEGER" property="id" />
      <result column="tagName" jdbcType="VARCHAR" property="name" />
      <result column="tagfatherId" jdbcType="INTEGER" property="fatherId" />
    </collection>
  </resultMap>

  <resultMap extends="BookListDisplay" id="BookDetail" type="cn.zx.biri.common.pojo.response.BookDetail">
    <result column="summary" jdbcType="LONGVARCHAR" property="summary" />
    <result column="catalog" jdbcType="LONGVARCHAR" property="catalog" />
    <!--<collection property="imagePaths" ofType="cn.zx.biri.common.pojo.entry.BookWithImagePath">-->
    <!--<id column="imagePathId" jdbcType="INTEGER" property="id" />-->
    <!--<result column="imagePath" jdbcType="VARCHAR" property="bookImagePath" />-->
    <!--<result column="imagePathStatus" jdbcType="VARCHAR" property="status" />-->
  <!--</collection>-->

    <!--<collection property="authors" ofType="cn.zx.biri.common.pojo.entry.Author">-->
      <!--<id column="authorId" jdbcType="INTEGER" property="id" />-->
      <!--<result column="authorName" jdbcType="VARCHAR" property="name" />-->
      <!--<result column="authorIntroduction" jdbcType="LONGVARCHAR" property="introduction" />-->
    <!--</collection>-->
    <!--<collection property="tags" ofType="cn.zx.biri.common.pojo.entry.Tag">-->
      <!--<id column="tagId" jdbcType="INTEGER" property="id" />-->
      <!--<result column="tagName" jdbcType="VARCHAR" property="name" />-->
      <!--<result column="tagfatherId" jdbcType="INTEGER" property="fatherId" />-->
    <!--</collection>-->
  </resultMap>
  <sql id="selectBookListDisplayFieldSql">
      SELECT
      book.id AS id,
      book.title AS title,
      book.publisher AS publisher,
      book.price AS price,
      book.stock AS stock,
      book.isbn AS isbn,
      author.id AS authorId,
      book.putaway AS putaway,
      author.`name` AS authorName,
      book.score AS score,
      tag.id AS tagId,
      tag.`name` AS tagName,
      tag.fatherId AS tagFatherId,
      bookWithImagePath.id AS imagePathId,
      bookWithImagePath.bookImagePath AS imagePath,
      bookWithImagePath.status AS imagePathStatus,
      book.summary AS summary
      ,tab2.detail AS hotComment
    ,bookWithStatus.id AS bookWithStatusId
    ,bookWithStatus.status AS statusId
    ,bookStatus.description AS statusDescription

  </sql>

  <sql id="selectBookIdByCondition">
    SELECT A.bookId FROM
    (
    SELECT book.id AS bookId 
    from book 
    <where>
      <if test="currentBookIds != null and currentBookIds.size>0">
        AND id IN
        <foreach close=")" collection="currentBookIds" item="bookId" open="(" separator=",">
              #{bookId}
        </foreach>
      </if>
      <if test="keyword != null and currentBookIds == null">
        AND keyword LIKE "%"#{keyword}"%"
      </if>
      <if test="publisher != null">
        AND publisher = #{publisher}
      </if>
    </where>
    ) AS A
    <if test="authorId != null">
      INNER JOIN
      (select bookId
      from bookWithAuthor
      WHERE bookWithAuthor.authorId = #{authorId}) AS B
      ON A.bookId = B.bookId
    </if>
    <if test="tagIds != null and tagIds.size > 0">
      INNER JOIN
      (
      SELECT bookId FROM
      <trim prefix="(" suffix=")" suffixOverrides="UNION ALL">
        <foreach  collection="tagIds" item="item" separator="UNION ALL">
         SELECT bookId FROM bookWithTag WHERE tagId = #{item}
        </foreach>
      </trim>
       AS bookIds
      GROUP BY bookIds.bookId HAVING COUNT(*) = ${tagIds.size}) AS C
      ON A.bookId = C.bookId
    </if>
    <if test="status != null">
      INNER JOIN
      (
      SELECT bookWithStatus.bookId AS bookId
      FROM bookWithStatus
      WHERE bookWithStatus.`status` = #{status}) AS D
      ON A.bookId = D.bookId
    </if>
  </sql>

  <select id="selectBookCount" parameterType="cn.zx.biri.common.pojo.vo.SelectBook" resultType="java.lang.Integer">
    <include refid="selectBookIdByCondition"></include>
  </select>
  <sql id="selectBookDetailSql">
    <include refid="selectBookListDisplayFieldSql"/>
    ,
    author.introduction AS authorIntroduction,
    book.summary AS summary,
    book.catalog AS catalog,

    book.publishDate AS publishDate,
    book.sales AS sales,
    book.stock AS stock
  </sql>

  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    id, title, imagePath, publisher, price, isbn, putaway, sales, stock, authorId, publishDate,
    score, keyword
  </sql>
  <sql id="Blob_Column_List">
    summary, catalog
  </sql>

    <sql id="selectBookListFromSql">

        from book
        INNER JOIN bookWithAuthor
        ON book.id = bookWithAuthor.bookId
    INNER JOIN author
    ON bookWithAuthor.authorId = author.id
    INNER JOIN bookWithTag
    ON bookWithTag.bookId = book.id
    INNER JOIN tag
    ON bookWithTag.tagId = tag.id
    INNER JOIN bookWithImagePath
    ON book.id = bookWithImagePath.bookId
    LEFT JOIN (
          SELECT
          MAX(count),bookId,detail,commentId
          FROM
          (SELECT
          COUNT(*) AS count,
          bookId,
          detail,
          commentId
          from `comment`,
          commentSupport
           WHERE `comment`.id = commentSupport.commentId
           GROUP BY commentId) AS tab1
           GROUP BY bookId) AS tab2
           ON book.id = tab2.bookId
      LEFT JOIN bookWithStatus
      ON book.id = bookWithStatus.bookId
      LEFT JOIN bookStatus
      ON bookWithStatus.status = bookStatus.id

      </sql>
  <sql id="selectBookListWhereSql">
        <where>
            <if test="authorId != null">
                OR author.id = #{authorId}
            </if>
            <if test="authorName != null">
                OR author.name LIKE #{authorName}
            </if>
            <if test="tagId != null">
                OR tag.id = #{tagId}
            </if>
            <if test="tagName != null">
                OR tag.name LIKE #{tagName}
            </if>
            <if test="title != null">
                OR title LIKE #{title}
            </if>
            <if test="isbn != null">
                OR isbn = #{isbn}
            </if>
            <if test="publisher != null">
                OR publisher = #{publisher}
            </if>
        </where>
    </sql>
    
  <select id="selectBookList" parameterType="cn.zx.biri.common.pojo.vo.SelectBook" resultMap="BookListDisplay">


    <include refid="selectBookListDisplayFieldSql"/>
    <include refid="selectBookListFromSql"/>
    WHERE book.id IN (SELECT id FROM (
    SELECT id FROM book where id IN
    (
    <include refid="selectBookIdByCondition"/>
    )
    <if test="orderBy != null">
      ORDER  BY #{orderBy} DESC
    </if>
    limit #{start},12
    ) AS result
    )

  </select>
  <select id="selectAllBookList" resultMap="BookListDisplay">
    <include refid="selectBookListDisplayFieldSql"/>
    <include refid="selectBookListFromSql"/>
    ORDER  BY book.id
  </select>
    <select id="selectBookCountByCondition" parameterType="cn.zx.biri.common.pojo.vo.SelectBook" resultType="java.lang.Integer">
        SELECT COUNT(*) FROM (
        <include refid="selectBookIdByCondition"></include>
        ) AS result
    </select>


  <select id="filterPublisher" parameterType="java.util.List" resultType="java.lang.String">
    SELECT DISTINCT publisher
    FROM book
    WHERE id IN
    <foreach collection="list" open="(" close=")" item="bookId" separator=",">
      #{bookId}
    </foreach>
  </select>

  <select id="filterAuthor" parameterType="java.util.List" resultType="cn.zx.biri.common.pojo.entry.Author">
    SELECT DISTINCT author.id AS id,author.name AS name
    FROM author,bookWithAuthor
    WHERE author.id = bookWithAuthor.authorId AND
    bookWithAuthor.bookId IN
    <foreach collection="list" open="(" close=")" item="bookId" separator=",">
      #{bookId}
    </foreach>
  </select>
  <select id="filterTag" parameterType="java.util.List" resultType="cn.zx.biri.common.pojo.entry.Tag">
    SELECT DISTINCT tag.id AS id,tag.name AS name from tag,bookWithTag
    WHERE tag.id = bookWithTag.tagId AND bookId IN
    <foreach collection="list" open="(" close=")" item="bookId" separator=",">
      #{bookId}
    </foreach>
    AND tag.id != 148
  </select>
  <select id="selectBookDetail" parameterType="java.lang.Integer" resultMap="BookDetail">
    <include refid="selectBookDetailSql"/>
    <include refid="selectBookListFromSql"/>
--     from book,author,tag,bookWithTag,bookWithAuthor,bookWithImagePath WHERE book.id = bookWithAuthor.bookId and
--     bookWithAuthor.authorId =  author.id AND bookWithTag.bookId = book.id AND bookWithImagePath.bookId = book.id AND bookWithTag.tagId = tag.id AND
--
   WHERE book.id=#{bookId}
  </select>
  <select id="selectByExampleWithBLOBs" parameterType="cn.zx.biri.common.pojo.example.BookExample" resultMap="ResultMapWithBLOBs">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from book
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByExample" parameterType="cn.zx.biri.common.pojo.example.BookExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from book
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="ResultMapWithBLOBs">
    select 
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from book
    where id = #{id,jdbcType=INTEGER}
  </select>
  <select id="getBookForUpdate" parameterType="java.lang.Integer" resultMap="ResultMapWithBLOBs">
    select
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from book
    where id = #{bookId,jdbcType=INTEGER} FOR UPDATE;
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from book
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="cn.zx.biri.common.pojo.example.BookExample">
    delete from book
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="cn.zx.biri.common.pojo.entry.BookWithBLOBs">
      insert into book (id, title, imagePath,
      publisher, price, isbn,
      putaway, sales, stock,
      authorId, publishDate, score,
      keyword, summary, catalog
      )
    values (#{id,jdbcType=INTEGER}, #{title,jdbcType=VARCHAR}, #{imagePath,jdbcType=VARCHAR},
      #{publisher,jdbcType=VARCHAR}, #{price,jdbcType=DOUBLE}, #{isbn,jdbcType=BIGINT},
      #{putaway,jdbcType=VARCHAR}, #{sales,jdbcType=INTEGER}, #{stock,jdbcType=INTEGER},
      #{authorId,jdbcType=INTEGER}, #{publishDate,jdbcType=VARCHAR}, #{score,jdbcType=DOUBLE},
      #{keyword,jdbcType=VARCHAR}, #{summary,jdbcType=LONGVARCHAR}, #{catalog,jdbcType=LONGVARCHAR}
      )
  </insert>
  <insert id="insertSelective" useGeneratedKeys="true" keyProperty="id" parameterType="cn.zx.biri.common.pojo.entry.BookWithBLOBs">
    insert into book
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="title != null">
        title,
      </if>
      <if test="imagePath != null">
        imagePath,
      </if>
      <if test="publisher != null">
        publisher,
      </if>
      <if test="price != null">
        price,
      </if>
      <if test="isbn != null">
        isbn,
      </if>
      <if test="putaway != null">
        putaway,
      </if>
      <if test="sales != null">
        sales,
      </if>
      <if test="stock != null">
        stock,
      </if>
      <if test="publishDate != null">
        publishDate,
      </if>
      <if test="score != null">
        score,
      </if>
      <if test="keyword != null">
        keyword,
      </if>
      <if test="summary != null">
        summary,
      </if>
      <if test="catalog != null">
        catalog,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=INTEGER},
      </if>
      <if test="title != null">
        #{title,jdbcType=VARCHAR},
      </if>
      <if test="imagePath != null">
        #{imagePath,jdbcType=VARCHAR},
      </if>
      <if test="publisher != null">
        #{publisher,jdbcType=VARCHAR},
      </if>
      <if test="price != null">
        #{price,jdbcType=DOUBLE},
      </if>
      <if test="isbn != null">
        #{isbn,jdbcType=BIGINT},
      </if>
      <if test="putaway != null">
        #{putaway,jdbcType=VARCHAR},
      </if>
      <if test="sales != null">
        #{sales,jdbcType=INTEGER},
      </if>
      <if test="stock != null">
        #{stock,jdbcType=INTEGER},
      </if>

      <if test="publishDate != null">
        #{publishDate,jdbcType=VARCHAR},
      </if>
      <if test="score != null">
        #{score,jdbcType=DOUBLE},
      </if>
      <if test="keyword != null">
        #{keyword,jdbcType=VARCHAR},
      </if>
      <if test="summary != null">
        #{summary,jdbcType=LONGVARCHAR},
      </if>
      <if test="catalog != null">
        #{catalog,jdbcType=LONGVARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="cn.zx.biri.common.pojo.example.BookExample" resultType="java.lang.Long">
    select count(*) from book
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update book
    <set>
      <if test="record.id != null">
        id = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.title != null">
        title = #{record.title,jdbcType=VARCHAR},
      </if>
      <if test="record.imagePath != null">
        imagePath = #{record.imagePath,jdbcType=VARCHAR},
      </if>
      <if test="record.publisher != null">
        publisher = #{record.publisher,jdbcType=VARCHAR},
      </if>
      <if test="record.price != null">
        price = #{record.price,jdbcType=DOUBLE},
      </if>
      <if test="record.isbn != null">
        isbn = #{record.isbn,jdbcType=BIGINT},
      </if>
      <if test="record.putaway != null">
        putaway = #{record.putaway,jdbcType=VARCHAR},
      </if>
      <if test="record.sales != null">
        sales = #{record.sales,jdbcType=INTEGER},
      </if>
      <if test="record.stock != null">
        stock = #{record.stock,jdbcType=INTEGER},
      </if>

      <if test="record.publishDate != null">
        publishDate = #{record.publishDate,jdbcType=VARCHAR},
      </if>
      <if test="record.score != null">
        score = #{record.score,jdbcType=DOUBLE},
      </if>
      <if test="record.keyword != null">
        keyword = #{record.keyword,jdbcType=VARCHAR},
      </if>
      <if test="record.summary != null">
        summary = #{record.summary,jdbcType=LONGVARCHAR},
      </if>
      <if test="record.catalog != null">
        catalog = #{record.catalog,jdbcType=LONGVARCHAR},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExampleWithBLOBs" parameterType="map">
    update book
    set id = #{record.id,jdbcType=INTEGER},
    title = #{record.title,jdbcType=VARCHAR},
    imagePath = #{record.imagePath,jdbcType=VARCHAR},
    publisher = #{record.publisher,jdbcType=VARCHAR},
    price = #{record.price,jdbcType=DOUBLE},
    isbn = #{record.isbn,jdbcType=BIGINT},
    putaway = #{record.putaway,jdbcType=VARCHAR},
    sales = #{record.sales,jdbcType=INTEGER},
    stock = #{record.stock,jdbcType=INTEGER},

    publishDate = #{record.publishDate,jdbcType=VARCHAR},
    score = #{record.score,jdbcType=DOUBLE},
    keyword = #{record.keyword,jdbcType=VARCHAR},
    summary = #{record.summary,jdbcType=LONGVARCHAR},
    catalog = #{record.catalog,jdbcType=LONGVARCHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update book
    set id = #{record.id,jdbcType=INTEGER},
    title = #{record.title,jdbcType=VARCHAR},
    imagePath = #{record.imagePath,jdbcType=VARCHAR},
    publisher = #{record.publisher,jdbcType=VARCHAR},
    price = #{record.price,jdbcType=DOUBLE},
    isbn = #{record.isbn,jdbcType=BIGINT},
    putaway = #{record.putaway,jdbcType=VARCHAR},
    sales = #{record.sales,jdbcType=INTEGER},
    stock = #{record.stock,jdbcType=INTEGER},

    publishDate = #{record.publishDate,jdbcType=VARCHAR},
    score = #{record.score,jdbcType=DOUBLE},
    keyword = #{record.keyword,jdbcType=VARCHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="cn.zx.biri.common.pojo.entry.BookWithBLOBs">
    update book
    <set>
      <if test="title != null">
        title = #{title,jdbcType=VARCHAR},
      </if>
      <if test="imagePath != null">
        imagePath = #{imagePath,jdbcType=VARCHAR},
      </if>
      <if test="publisher != null">
        publisher = #{publisher,jdbcType=VARCHAR},
      </if>
      <if test="price != null">
        price = #{price,jdbcType=DOUBLE},
      </if>
      <if test="isbn != null">
        isbn = #{isbn,jdbcType=BIGINT},
      </if>
      <if test="putaway != null">
        putaway = #{putaway,jdbcType=VARCHAR},
      </if>
      <if test="sales != null">
        sales = #{sales,jdbcType=INTEGER},
      </if>
      <if test="stock != null">
        stock = #{stock,jdbcType=INTEGER},
      </if>

      <if test="publishDate != null">
        publishDate = #{publishDate,jdbcType=VARCHAR},
      </if>
      <if test="score != null">
        score = #{score,jdbcType=DOUBLE},
      </if>
      <if test="keyword != null">
        keyword = #{keyword,jdbcType=VARCHAR},
      </if>
      <if test="summary != null">
        summary = #{summary,jdbcType=LONGVARCHAR},
      </if>
      <if test="catalog != null">
        catalog = #{catalog,jdbcType=LONGVARCHAR},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKeyWithBLOBs" parameterType="cn.zx.biri.common.pojo.entry.BookWithBLOBs">
    update book
    set title = #{title,jdbcType=VARCHAR},
      imagePath = #{imagePath,jdbcType=VARCHAR},
      publisher = #{publisher,jdbcType=VARCHAR},
      price = #{price,jdbcType=DOUBLE},
      isbn = #{isbn,jdbcType=BIGINT},
      putaway = #{putaway,jdbcType=VARCHAR},
      sales = #{sales,jdbcType=INTEGER},
      stock = #{stock,jdbcType=INTEGER},

      publishDate = #{publishDate,jdbcType=VARCHAR},
      score = #{score,jdbcType=DOUBLE},
      keyword = #{keyword,jdbcType=VARCHAR},
      summary = #{summary,jdbcType=LONGVARCHAR},
      catalog = #{catalog,jdbcType=LONGVARCHAR}
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="cn.zx.biri.common.pojo.entry.Book">
     update book
    set title = #{title,jdbcType=VARCHAR},
      imagePath = #{imagePath,jdbcType=VARCHAR},
      publisher = #{publisher,jdbcType=VARCHAR},
      price = #{price,jdbcType=DOUBLE},
      isbn = #{isbn,jdbcType=BIGINT},
      putaway = #{putaway,jdbcType=VARCHAR},
      sales = #{sales,jdbcType=INTEGER},
      stock = #{stock,jdbcType=INTEGER},

      publishDate = #{publishDate,jdbcType=VARCHAR},
      score = #{score,jdbcType=DOUBLE},
      keyword = #{keyword,jdbcType=VARCHAR}
    where id = #{id,jdbcType=INTEGER}
  </update>
</mapper>